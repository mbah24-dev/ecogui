generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  password     String
  name         String
  role         Role
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  resetToken   String?
  balance      Float       @default(0.0)
  profilePic   String?
  isOnline     Boolean     @default(false)
  countryCode  String?
  phoneNumber  String?     @unique
  score        Int         @default(50)
  addresses    Address[]
  cart         Cart?
  orders       Order[]
  soldProducts OrderItem[] @relation("SoldProducts")
  products     Product[]
  reviews      Review[]
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String
  sellerId    String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      ProductStatus  @default(AVAILABLE)
  buyCount    Int            @default(0)
  cartItems   CartItem[]
  orderItems  OrderItem?
  category    Category       @relation(fields: [categoryId], references: [id])
  seller      User           @relation(fields: [sellerId], references: [id])
  images      ProductImage[]
  reviews     Review[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Order {
  id         String      @id @default(uuid())
  buyerId    String
  status     OrderStatus @default(PENDING)
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  buyer      User        @relation(fields: [buyerId], references: [id])
  items      OrderItem[]
  invoices   Invoice[]
}

model OrderItem {
  id        String          @id @default(uuid())
  orderId   String
  productId String          @unique
  quantity  Int
  price     Float
  sellerId  String
  status    OrderItemStatus @default(PENDING)
  order     Order           @relation(fields: [orderId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
  seller    User            @relation("SoldProducts", fields: [sellerId], references: [id])
}

model Invoice {
  id          String        @id @default(uuid())
  orderId     String
  totalAmount Decimal       @db.Decimal(10, 2)
  pdfUrl      String?
  status      InvoiceStatus @default(GENERATED)
  createdAt   DateTime      @default(now())
  order       Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  message   String
  rating    Int
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  city        String
  country     String   @default("Guinee")
  createdAt   DateTime @default(now())
  commune     String?
  description String?
  user        User     @relation(fields: [userId], references: [id])
}

model Cart {
  id     String     @id @default(uuid())
  userId String     @unique
  total  Float      @default(0.0)
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  BUYER
  SELLER
  ADMIN
  BANNED
  RESTRICTED
  BUYER_AND_SELLER
  ARCHIVED
}

enum ProductStatus {
  AVAILABLE
  SOLD_OUT
  PENDING
  ARCHIVED
}

enum OrderItemStatus {
  CONFIRMED
  PENDING
  REFUSED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
  CONFIRMED
  PARTIAL
}

enum InvoiceStatus {
  GENERATED
  SENT
  PAID
  CANCELED
}
